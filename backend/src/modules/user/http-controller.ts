import { Body, Controller, Delete, Get, Param, Post, Put, Query, Req, UseGuards } from '@nestjs/common'
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery, ApiBody } from '@nestjs/swagger'
import { JwtAuthGuard } from 'src/@shared/guards/jwtAuth.guard'
import { CreateDTO, DeleteDTO, EntityResponse, GetDTO, UpdateDTO } from './entities/entity'
import { Service } from './service'

@ApiTags('üë• Users')
@Controller('users')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT-auth')
export class HttpController {
  constructor(private readonly service: Service) { }

  @Post()
  @ApiOperation({
    summary: 'üë§ Create New User',
    description: `
      **Cria um novo usu√°rio no sistema.**
      
      **Funcionalidades:**
      - ‚úÖ Valida email √∫nico
      - ‚úÖ Cria√ß√£o com dados b√°sicos
      - ‚úÖ Automaticamente inclui timestamps
      
      **üîê Requer:** Permiss√£o \`api-criar-user\`
    `,
  })
  @ApiBody({
    description: 'Dados para cria√ß√£o do usu√°rio',
    schema: {
      type: 'object',
      required: ['email'],
      properties: {
        email: {
          type: 'string',
          format: 'email',
          description: 'Email √∫nico do usu√°rio',
          example: 'joao.silva@email.com'
        },
        name: {
          type: 'string',
          description: 'Nome completo do usu√°rio (opcional)',
          example: 'Jo√£o Silva'
        }
      }
    }
  })
  @ApiResponse({
    status: 201,
    description: 'Usu√°rio criado com sucesso',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          properties: {
            count: { type: 'number', example: 1 },
            items: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'number', example: 1 },
                  email: { type: 'string', example: 'joao.silva@email.com' },
                  name: { type: 'string', example: 'Jo√£o Silva' },
                  createdAt: { type: 'string', format: 'date-time' },
                  updatedAt: { type: 'string', format: 'date-time' }
                }
              }
            }
          }
        }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'Email j√° existe ou dados inv√°lidos' })
  @ApiResponse({ status: 403, description: 'Sem permiss√£o para criar usu√°rios' })
  async create(@Req() req: any, @Body() data: CreateDTO): Promise<EntityResponse> {
    return await this.service.execute({
      datap: data,
      method: 'create',
      tokenData: req.tokenData,
      customData: {},
      error: undefined,
    })
  }

  @Get()
  @ApiOperation({
    summary: 'üë• List All Users',
    description: `
      **Lista usu√°rios com pagina√ß√£o e relacionamentos.**
      
      **Funcionalidades:**
      - ‚úÖ Pagina√ß√£o inteligente
      - ‚úÖ Inclui posts do usu√°rio
      - ‚úÖ Inclui perfil associado
      - ‚úÖ Ordena√ß√£o por data de cria√ß√£o
      
      **üîê Requer:** Permiss√£o \`api-ler-user\`
    `,
  })
  @ApiQuery({ name: 'skip', required: false, type: 'number', description: 'Registros para pular (padr√£o: 0)', example: 0 })
  @ApiQuery({ name: 'take', required: false, type: 'number', description: 'Registros para retornar (padr√£o: 10)', example: 10 })
  @ApiResponse({
    status: 200,
    description: 'Lista de usu√°rios com relacionamentos',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          properties: {
            count: { type: 'number', description: 'Total de usu√°rios', example: 15 },
            items: {
              type: 'array',
              description: 'Array de usu√°rios com posts e perfis',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'number', example: 1 },
                  email: { type: 'string', example: 'usuario@email.com' },
                  name: { type: 'string', example: 'Usu√°rio Exemplo' },
                  createdAt: { type: 'string', format: 'date-time' },
                  posts: {
                    type: 'array',
                    description: 'Posts criados pelo usu√°rio',
                    items: {
                      type: 'object',
                      properties: {
                        id: { type: 'number' },
                        title: { type: 'string' },
                        published: { type: 'boolean' }
                      }
                    }
                  },
                  profile: {
                    type: 'object',
                    nullable: true,
                    description: 'Perfil do usu√°rio (se existir)',
                    properties: {
                      id: { type: 'number' },
                      bio: { type: 'string' }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  })
  async getAll(@Req() req: any, @Query() query: any): Promise<EntityResponse> {
    const data: GetDTO = {
      skip: query.skip ? parseInt(query.skip) : undefined,
      take: query.take ? parseInt(query.take) : undefined,
      andWhere: query.andWhere ? JSON.parse(query.andWhere) : undefined,
      orWhere: query.orWhere ? JSON.parse(query.orWhere) : undefined,
      andWhereNot: query.andWhereNot ? JSON.parse(query.andWhereNot) : undefined,
      orWhereNot: query.orWhereNot ? JSON.parse(query.orWhereNot) : undefined,
      orderBy: query.orderBy ? JSON.parse(query.orderBy) : undefined,
    }

    return await this.service.execute({
      datap: data,
      method: 'get',
      tokenData: req.tokenData,
      customData: {},
      error: undefined,
    })
  }

  @Get(':id')
  @ApiOperation({
    summary: 'üîç Get User by ID',
    description: `
      **Busca usu√°rio espec√≠fico com todos os relacionamentos.**
      
      **Inclui:**
      - ‚úÖ Dados b√°sicos do usu√°rio
      - ‚úÖ Todos os posts do usu√°rio
      - ‚úÖ Perfil completo (se existir)
      
      **üîê Requer:** Permiss√£o \`api-ler-user\`
    `,
  })
  @ApiParam({
    name: 'id',
    type: 'number',
    description: 'ID √∫nico do usu√°rio',
    example: 1
  })
  @ApiResponse({
    status: 200,
    description: 'Usu√°rio encontrado com relacionamentos completos'
  })
  @ApiResponse({ status: 400, description: 'ID inv√°lido' })
  @ApiResponse({ status: 404, description: 'Usu√°rio n√£o encontrado' })
  async getById(@Req() req: any, @Param('id') id: string): Promise<EntityResponse> {
    const numericId = parseInt(id, 10)
    if (isNaN(numericId)) {
      return { error: { badRequest: 'Invalid ID format' } }
    }

    const data: GetDTO = {
      andWhere: [{ field: 'id', fieldType: 'valueInt', valueInt: numericId }],
      take: 1,
    }

    return await this.service.execute({
      datap: data,
      method: 'get',
      tokenData: req.tokenData,
      customData: {},
      error: undefined,
    })
  }

  @Put(':id')
  @ApiOperation({
    summary: '‚úèÔ∏è Update User',
    description: `
      **Atualiza dados de um usu√°rio existente.**
      
      **üîê Requer:** Permiss√£o \`api-atualizar-user\`
    `,
  })
  @ApiParam({ name: 'id', type: 'number', description: 'ID do usu√°rio a ser atualizado' })
  @ApiBody({
    description: 'Dados para atualiza√ß√£o (todos opcionais)',
    schema: {
      type: 'object',
      properties: {
        email: { type: 'string', format: 'email', example: 'novo.email@example.com' },
        name: { type: 'string', example: 'Novo Nome' }
      }
    }
  })
  @ApiResponse({ status: 200, description: 'Usu√°rio atualizado com sucesso' })
  @ApiResponse({ status: 404, description: 'Usu√°rio n√£o encontrado' })
  async update(@Req() req: any, @Param('id') id: string, @Body() data: Omit<UpdateDTO, 'id'>): Promise<EntityResponse> {
    const numericId = parseInt(id, 10)
    if (isNaN(numericId)) {
      return { error: { badRequest: 'Invalid ID format' } }
    }

    const updateData: UpdateDTO = { ...data, id: numericId }

    return await this.service.execute({
      datap: updateData,
      method: 'update',
      tokenData: req.tokenData,
      customData: {},
      error: undefined,
    })
  }

  @Delete(':id')
  @ApiOperation({
    summary: 'üóëÔ∏è Delete User',
    description: `
      **Remove um usu√°rio do sistema.**
      
      **‚ö†Ô∏è CUIDADO:** Esta a√ß√£o pode afetar posts e perfis relacionados.
      
      **üîê Requer:** Permiss√£o \`api-deletar-user\`
    `,
  })
  @ApiParam({ name: 'id', type: 'number', description: 'ID do usu√°rio a ser deletado' })
  @ApiResponse({ status: 200, description: 'Usu√°rio deletado com sucesso' })
  @ApiResponse({ status: 404, description: 'Usu√°rio n√£o encontrado' })
  async delete(@Req() req: any, @Param('id') id: string): Promise<EntityResponse> {
    const numericId = parseInt(id, 10)
    if (isNaN(numericId)) {
      return { error: { badRequest: 'Invalid ID format' } }
    }

    const data: DeleteDTO = { id: numericId }

    return await this.service.execute({
      datap: data,
      method: 'delete',
      tokenData: req.tokenData,
      customData: {},
      error: undefined,
    })
  }
}
